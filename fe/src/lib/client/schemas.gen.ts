// This file is auto-generated by @hey-api/openapi-ts

export const APIMessageSchema = {
    properties: {
        detail: {
            type: 'string',
            title: 'Detail'
        }
    },
    type: 'object',
    required: ['detail'],
    title: 'APIMessage',
    description: 'A lightweight utility class intended for use with simple message-returning endpoints.'
} as const;

export const ComicDetailResponseSchema = {
    properties: {
        pageDetails: {
            items: {
                '$ref': '#/components/schemas/ComicPageDetailResponse'
            },
            type: 'array',
            title: 'Pagedetails'
        }
    },
    type: 'object',
    required: ['pageDetails'],
    title: 'ComicDetailResponse'
} as const;

export const ComicEntitySchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        size: {
            type: 'integer',
            title: 'Size'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        path: {
            type: 'string',
            title: 'Path'
        },
        updateTime: {
            type: 'string',
            format: 'date-time',
            title: 'Updatetime'
        },
        archived: {
            type: 'boolean',
            title: 'Archived',
            default: false
        },
        favorited: {
            type: 'boolean',
            title: 'Favorited',
            default: false
        },
        lastViewedTime: {
            type: 'string',
            format: 'date-time',
            title: 'Lastviewedtime'
        },
        lastViewedPosition: {
            type: 'integer',
            title: 'Lastviewedposition',
            default: 0
        },
        coverPosition: {
            type: 'integer',
            title: 'Coverposition',
            default: 0
        },
        entityUpdateTime: {
            type: 'string',
            format: 'date-time',
            title: 'Entityupdatetime',
            default: '2025-03-16T17:04:36.800392'
        },
        page: {
            type: 'integer',
            title: 'Page',
            default: 0
        }
    },
    type: 'object',
    required: ['id', 'size', 'name', 'path', 'updateTime'],
    title: 'ComicEntity'
} as const;

export const ComicPageDetailResponseSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    type: 'object',
    required: ['name'],
    title: 'ComicPageDetailResponse'
} as const;

export const FavorResponseSchema = {
    properties: {
        favorited: {
            type: 'boolean',
            title: 'Favorited'
        }
    },
    type: 'object',
    required: ['favorited'],
    title: 'FavorResponse'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const ImageEntitySchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        size: {
            type: 'integer',
            title: 'Size'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        path: {
            type: 'string',
            title: 'Path'
        },
        updateTime: {
            type: 'string',
            format: 'date-time',
            title: 'Updatetime'
        },
        archived: {
            type: 'boolean',
            title: 'Archived',
            default: false
        },
        favorited: {
            type: 'boolean',
            title: 'Favorited',
            default: false
        },
        lastViewedTime: {
            type: 'string',
            format: 'date-time',
            title: 'Lastviewedtime'
        },
        lastViewedPosition: {
            type: 'integer',
            title: 'Lastviewedposition',
            default: 0
        },
        coverPosition: {
            type: 'integer',
            title: 'Coverposition',
            default: 0
        },
        entityUpdateTime: {
            type: 'string',
            format: 'date-time',
            title: 'Entityupdatetime',
            default: '2025-03-16T17:04:36.800392'
        }
    },
    type: 'object',
    required: ['id', 'size', 'name', 'path', 'updateTime'],
    title: 'ImageEntity'
} as const;

export const MessageResponseSchema = {
    properties: {
        msg: {
            type: 'string',
            title: 'Msg'
        }
    },
    type: 'object',
    required: ['msg'],
    title: 'MessageResponse'
} as const;

export const RenameRequestSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    type: 'object',
    required: ['name'],
    title: 'RenameRequest'
} as const;

export const RenameResponseSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    type: 'object',
    required: ['name'],
    title: 'RenameResponse'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;

export const VideoEntitySchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        size: {
            type: 'integer',
            title: 'Size'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        path: {
            type: 'string',
            title: 'Path'
        },
        updateTime: {
            type: 'string',
            format: 'date-time',
            title: 'Updatetime'
        },
        archived: {
            type: 'boolean',
            title: 'Archived',
            default: false
        },
        favorited: {
            type: 'boolean',
            title: 'Favorited',
            default: false
        },
        lastViewedTime: {
            type: 'string',
            format: 'date-time',
            title: 'Lastviewedtime'
        },
        lastViewedPosition: {
            type: 'integer',
            title: 'Lastviewedposition',
            default: 0
        },
        coverPosition: {
            type: 'integer',
            title: 'Coverposition',
            default: 0
        },
        entityUpdateTime: {
            type: 'string',
            format: 'date-time',
            title: 'Entityupdatetime',
            default: '2025-03-16T17:04:36.800392'
        },
        durationInSecond: {
            type: 'integer',
            title: 'Durationinsecond',
            default: 0
        }
    },
    type: 'object',
    required: ['id', 'size', 'name', 'path', 'updateTime'],
    title: 'VideoEntity'
} as const;